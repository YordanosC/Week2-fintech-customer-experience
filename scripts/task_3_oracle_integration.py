import cx_Oracle
import pandas as pd
import os

# Connection details - replace host, port, and password accordingly
dsn = cx_Oracle.makedsn('host', 'port', service_name='orcl')
connection = cx_Oracle.connect(
    user='admin',
    password='your_password',
    dsn='localhost:1521/MYPDB'
)
cursor = connection.cursor()

# Create table with 'review_date' instead of 'date' to avoid reserved keyword issues
create_table_sql = """
CREATE TABLE reviews (
    review_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    review_text VARCHAR2(4000),
    rating NUMBER(1),
    review_date DATE,
    bank_name VARCHAR2(100),
    sentiment_label VARCHAR2(10),
    sentiment_score FLOAT
)
"""

try:
    cursor.execute(create_table_sql)
    print("Table 'reviews' created successfully.")
except cx_Oracle.DatabaseError as e:
    # If table exists, ignore error
    print("Table creation skipped or error occurred:", e)

# Load CSV file
csv_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'reviews_with_sentiment.csv')
df = pd.read_csv(csv_path)

# Ensure DataFrame columns match expected schema
# Rename 'date' column in DataFrame to 'review_date' if necessary
if 'date' in df.columns:
    df.rename(columns={'date': 'review_date'}, inplace=True)

# Prepare the insert SQL statement
insert_sql = """
INSERT INTO reviews (
    review_text,
    rating,
    review_date,
    bank_name,
    sentiment_label,
    sentiment_score
) VALUES (
    :1, :2, TO_DATE(:3, 'YYYY-MM-DD'), :4, :5, :6
)
"""

# Loop through DataFrame rows and insert data
for index, row in df.iterrows():
    # Convert 'review_date' to string in 'YYYY-MM-DD' format
    review_date_str = pd.to_datetime(row['review_date']).strftime('%Y-%m-%d')
    
    data = (
        row['review_text'],
        int(row['rating']),
        review_date_str,
        row['bank_name'],
        row['sentiment_label'],
        float(row['sentiment_score'])
    )
    try:
        cursor.execute(insert_sql, data)
    except cx_Oracle.DatabaseError as e:
        print(f"Error inserting row {index}: {e}")

# Commit the transaction
connection.commit()

# Close cursor and connection
cursor.close()
connection.close()

print("Data inserted into Oracle database successfully.")